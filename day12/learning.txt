[객체]
    - 매우 포괄적
    - 키(key)와 값(value)으로 구성된 속성의 집합
    - {}를 이용해 생성 (리터럴 방식이라고 표현)
    - 속성이 한 개도 없는 경우 빈 객체라고 표현
    - 객체안에 또다른 함수가 들어갈 수 있으며 이 경우 매서드(method)라고 표현

    const person = {
        name:{
            firstName:"Gildong"
            lastName:"Hong"
        },
        age:20,
        isAdult:true,
        printinfo:function(){
            console.log('printinfo);
        },
        likes:["apple", "samsung"],
        printHello:function(){
            return "hello";
        }
    }

[객체 속성 접근 1 : 대괄호 연산자1]
    - 객체명 뒤에 대괄호를 붙이고 그 안에 키를 입력
    - 키는 반드시 큰따옴표나 작은따옴표로 감싸야 함

    console.log(person["age"]); // 20 을 출력
    
    console.log(person[age]); 
        - 따옴표가 없으므로 age라는 키를 찾는게 아님
        - age라는 변수를 찾는데 변수가 없음
        - "" 또는 ''로 감싸지 않아서 name is not defined 라는 에러가 출력

[객체 속성 접근 1 : 대괄호 연산자2]
{객체의 속성값이 배열이나 객체 리터럴, 함수일 경우 접근}

    console.log(person["name"]);
        - person의 name을 찾음
        - name에는 firstName:"Gildong"과 lastName:"Hong"이 있음
        - {firstName:"Gildong", lastName:"Hong} 을 출력

    console.log(person["name"]["firstName"]);
        - person의 name을 찾음
        - 그 안의 firstName을 찾음
        - firstName으로 할당된 Gildong을 출력된다

    console.log(person["likes"]);
        - person의 likes를 찾음
        - likes에는 ["apple", "samsung"] 이 있음.
        - ["apple", "samsung"] 을 출력

    console.log(person["likes"][0]);
        - person의 likes를 찾음
        - likes에는 ["apple", "samsung"] 이 있음.
        - 그 중 0번째를 찾음
        - 0번째인 apple를 출력

    console.log(person["likes"][1]);
        - person의 likes를 찾음
        - likes에는 ["apple", "samsung"] 이 있음.
        - 그 중 1번째를 찾음
        - 1번째인 samsung을 출력

[객체 속성 접근 2 : 마침표 연산자]
    - .을 사용해 접근한다.
    - 큰따옴표나 작은따옴표로 감싸면 오류가 난다.
    - 키에 공백이 있으면 에러가 난다.

    console.log(person.name.lastName);
        - console.log(person["name"]["lastName"]);과 같은의미.

[개체 속성값 변경]
    - 키로 속성에 접근해서 재할당.

    person.name.lastName = "ka" // Hong를 ka로 변경함
    person["name"]["lastName"] = "ka" // 같은 의미

[개체 속성값 추가]
    - 변경과 같으며 미리 할당된 값이 없으면 추가됨

[개체 속성 삭제]
    - delete 키워드를 명시하면 해당 속성 삭제

    delete person.name.lastName; // lastName: "ka" 를 삭제함
    delete person["name"]["lastName"]; // 같은 의미

[string객체]
    - .뒤에 명령어를 사용함으로써 특정 기능을 함

    .length // 문자열의 길이를 반환
        const pw = "124";
        console.log(pw.length) // pw의 문자열이 3글자이므로 3을 출력

    .includes() // 문자열에 ()안의 문자열이 포함되면 true, 아니면 false를 반환
        const email = "test@naver.com"
        console.log(email.includes("@"));
            - test@naver.com(email) 안에 @가 포함되므로 true 출력

    .indexOf() 
        - 대상 문자열과 일치하는 첫 번째 문자의 인덱스(순서 - 0부터시작)를 반환
        - 일치하는 문자가 없을경우 -1을 반환

        const mail = "test@naver.com"
        console.log(mail.indexOf("@"));
            - @를 찾는데 5번째 있음
            - 0부터 시작하므로 4를 출력

        console.log(mail.indexOf("!"));
            - !를 찾는데 없음
            - 찾는 문자가 없으므로 -1을 출력


[배열 정리하기]

